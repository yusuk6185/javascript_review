{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GS66\\\\Desktop\\\\Docs\\\\Review\\\\React\\\\begin-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useMemo, useCallback } from 'react'; // import Hello from './Hello';\n\nimport './App.css';\nimport CreateUser from './CreateUser';\nimport UserList from './UserList'; // import Wrapper from './Wrapper';\n// import Counter from './Counter';\n// import InputSample from './InputSample';\n// import MultipleInput from './MultipleInput';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중..');\n  return users.filter(user => user.active).length;\n}\n\nfunction App() {\n  _s();\n\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  });\n  const {\n    username,\n    email\n  } = inputs;\n  const onChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({ ...inputs,\n      [name]: value\n    });\n  }, [inputs]);\n  const [users, setUsers] = useState([{\n    id: 1,\n    username: 'yusuk6185',\n    email: 'yusuk6185@gmail.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'test',\n    email: 'test@test.com',\n    active: false\n  }, {\n    id: 3,\n    username: 'velopert',\n    email: 'velopert@gmail.com',\n    active: false\n  }]); // 컴포넌트 안의 변수 만들기\n\n  const nextId = useRef(4); // 배열에 항목 추가하기\n\n  const onCreate = useCallback(() => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    };\n    setUsers(users => [...users, user]); // 불변성을 지켜줘야 함\n    // setUsers(users.concat(user)) 를 써도 같음\n\n    setInputs({\n      username: '',\n      email: ''\n    });\n    console.log(nextId.current); // 4\n\n    nextId.current += 1;\n  }, [username, email]); // 배열에 항목 삭제하기\n\n  const onRemove = useCallback(id => {\n    setUsers(users.filter(user => user.id !== id));\n  }, [users]); // 배열 업데이트 하기 -> map 사용하고 spread 로 불변성 유지\n\n  const onToggle = useCallback(id => {\n    setUsers(users.map(user => user.id === id ? { ...user,\n      active: !user.active\n    } : user));\n  }, [users]); // useMemo -> 컴포넌트 성능을 최적화 할 때 필요할 때만 실행되도록 하는 hook\n  // 연산 된 값을 재사용 함.\n\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {\n      username: username,\n      email: email,\n      onChange: onChange,\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users,\n      onRemove: onRemove,\n      onToggle: onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uD65C\\uC131 \\uC0AC\\uC6A9\\uC790 \\uC218: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"L5iR8NRe+3ZtUgL2V2pNAwDRwWk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/GS66/Desktop/Docs/Review/React/begin-react/src/App.js"],"names":["React","useRef","useState","useMemo","useCallback","CreateUser","UserList","countActiveUsers","users","console","log","filter","user","active","length","App","inputs","setInputs","username","email","onChange","e","name","value","target","setUsers","id","nextId","onCreate","current","onRemove","onToggle","map","count"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useMemo, useCallback } from 'react';\n// import Hello from './Hello';\nimport './App.css';\nimport CreateUser from './CreateUser';\nimport UserList from './UserList';\n// import Wrapper from './Wrapper';\n// import Counter from './Counter';\n// import InputSample from './InputSample';\n// import MultipleInput from './MultipleInput';\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중..');\n  return users.filter(user => user.active).length;\n}\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: '',\n  });\n  const { username, email } = inputs;\n  const onChange = useCallback(e => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value,\n    });\n  }, [inputs]);\n\n  const [users, setUsers] = useState([\n    {\n      id: 1, \n      username: 'yusuk6185',\n      email: 'yusuk6185@gmail.com',\n      active: true,\n    },\n    {\n      id: 2,\n      username: 'test',\n      email: 'test@test.com',\n      active: false,\n    },\n    {\n      id: 3,\n      username: 'velopert',\n      email: 'velopert@gmail.com',\n      active: false,\n    }\n  ]);\n  // 컴포넌트 안의 변수 만들기\n  const nextId = useRef(4);\n  // 배열에 항목 추가하기\n  const onCreate = useCallback(() => {\n    const user = {\n      id: nextId.current,\n      username,\n      email,\n    }\n    setUsers(users => [...users, user]) // 불변성을 지켜줘야 함\n    // setUsers(users.concat(user)) 를 써도 같음\n    setInputs({\n      username:'',\n      email:''\n    })\n    console.log(nextId.current); // 4\n    nextId.current += 1;\n  }, [username, email]);\n  \n  // 배열에 항목 삭제하기\n  const onRemove = useCallback(id => {\n    setUsers(users.filter(user => user.id !== id));\n  }, [users]);\n\n  // 배열 업데이트 하기 -> map 사용하고 spread 로 불변성 유지\n  const onToggle = useCallback(id => {\n    setUsers(users.map(\n      user => user.id === id\n        ? { ...user, active: !user.active }\n        : user\n    ))\n  }, [users]);\n\n  // useMemo -> 컴포넌트 성능을 최적화 할 때 필요할 때만 실행되도록 하는 hook\n  // 연산 된 값을 재사용 함.\n  const count = useMemo(() => countActiveUsers(users), [users]);\n\n  return (\n    <>\n    {/* <Wrapper>\n      <Hello name=\"react\" color=\"red\" isSpecial={true}/>\n      <Hello color=\"pink\" isSpecial={false}/>\n      <Hello/>\n    </Wrapper> */}\n    {/* <Counter/> */}\n    {/* <InputSample/> */}\n    {/* <MultipleInput/> */}\n      <CreateUser \n        username={username} \n        email={email} \n        onChange={onChange} \n        onCreate={onCreate}\n      />\n      <UserList users={users} onRemove={onRemove} onToggle={onToggle}/>\n      <div>활성 사용자 수: {count}</div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}